// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.14.0
// source: pkg/api/runtime/display/api.proto

package display

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GPUDisplay_PrintGraph_FullMethodName  = "/display.GPUDisplay/PrintGraph"
	GPUDisplay_PrintUsages_FullMethodName = "/display.GPUDisplay/PrintUsages"
	GPUDisplay_Version_FullMethodName     = "/display.GPUDisplay/Version"
)

// GPUDisplayClient is the client API for GPUDisplay service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GPUDisplayClient interface {
	// PrintGraph returns the text graph of allocator state
	PrintGraph(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GraphResponse, error)
	// GPU usages
	PrintUsages(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*UsageResponse, error)
	// Version
	Version(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*VersionResponse, error)
}

type gPUDisplayClient struct {
	cc grpc.ClientConnInterface
}

func NewGPUDisplayClient(cc grpc.ClientConnInterface) GPUDisplayClient {
	return &gPUDisplayClient{cc}
}

func (c *gPUDisplayClient) PrintGraph(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GraphResponse, error) {
	out := new(GraphResponse)
	err := c.cc.Invoke(ctx, GPUDisplay_PrintGraph_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gPUDisplayClient) PrintUsages(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*UsageResponse, error) {
	out := new(UsageResponse)
	err := c.cc.Invoke(ctx, GPUDisplay_PrintUsages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gPUDisplayClient) Version(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, GPUDisplay_Version_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GPUDisplayServer is the server API for GPUDisplay service.
// All implementations must embed UnimplementedGPUDisplayServer
// for forward compatibility
type GPUDisplayServer interface {
	// PrintGraph returns the text graph of allocator state
	PrintGraph(context.Context, *empty.Empty) (*GraphResponse, error)
	// GPU usages
	PrintUsages(context.Context, *empty.Empty) (*UsageResponse, error)
	// Version
	Version(context.Context, *empty.Empty) (*VersionResponse, error)
	mustEmbedUnimplementedGPUDisplayServer()
}

// UnimplementedGPUDisplayServer must be embedded to have forward compatible implementations.
type UnimplementedGPUDisplayServer struct {
}

func (UnimplementedGPUDisplayServer) PrintGraph(context.Context, *empty.Empty) (*GraphResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrintGraph not implemented")
}
func (UnimplementedGPUDisplayServer) PrintUsages(context.Context, *empty.Empty) (*UsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrintUsages not implemented")
}
func (UnimplementedGPUDisplayServer) Version(context.Context, *empty.Empty) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedGPUDisplayServer) mustEmbedUnimplementedGPUDisplayServer() {}

// UnsafeGPUDisplayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GPUDisplayServer will
// result in compilation errors.
type UnsafeGPUDisplayServer interface {
	mustEmbedUnimplementedGPUDisplayServer()
}

func RegisterGPUDisplayServer(s grpc.ServiceRegistrar, srv GPUDisplayServer) {
	s.RegisterService(&GPUDisplay_ServiceDesc, srv)
}

func _GPUDisplay_PrintGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GPUDisplayServer).PrintGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GPUDisplay_PrintGraph_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GPUDisplayServer).PrintGraph(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GPUDisplay_PrintUsages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GPUDisplayServer).PrintUsages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GPUDisplay_PrintUsages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GPUDisplayServer).PrintUsages(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GPUDisplay_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GPUDisplayServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GPUDisplay_Version_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GPUDisplayServer).Version(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// GPUDisplay_ServiceDesc is the grpc.ServiceDesc for GPUDisplay service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GPUDisplay_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "display.GPUDisplay",
	HandlerType: (*GPUDisplayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PrintGraph",
			Handler:    _GPUDisplay_PrintGraph_Handler,
		},
		{
			MethodName: "PrintUsages",
			Handler:    _GPUDisplay_PrintUsages_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _GPUDisplay_Version_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/runtime/display/api.proto",
}
